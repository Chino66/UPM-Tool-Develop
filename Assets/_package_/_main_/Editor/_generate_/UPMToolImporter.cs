//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UPMTool
{
    using System;
    using UnityEditor;
    using UnityEditor.PackageManager;
    using UnityEditor.PackageManager.Requests;
    using UnityEditor.PackageManager.UI;
    using UnityEngine.UIElements;
    using PackageInfo = UnityEditor.PackageManager.PackageInfo;
    
    
    [InitializeOnLoad()]
    public class UPMToolImporter : IPackageManagerExtension
    {
        
        public const string DisplayName = "UPM Tool";
        
        private bool existUPMTool = false;
        
        private static UnityEditor.PackageManager.Requests.AddRequest _addRequest;
        
        private static System.Action _addCompleteCallback;
        
        private static UnityEditor.PackageManager.Requests.ListRequest _checkListRequest;
        
        private static System.Action<bool> _checkListCompleteCallback;
        
        private Button button;
        
        static UPMToolImporter()
        {
            CheckList(exist=>{if(exist == false){PackageManagerExtensions.RegisterExtension(new UPMToolImporter());}});;
        }
        
        private static void Add(string packageId, System.Action action)
        {
            _addRequest = Client.Add(packageId);;
            _addCompleteCallback = action;;
            EditorApplication.update += AddProgress;;
        }
        
        private static void AddProgress()
        {
            if (!_addRequest.IsCompleted)
            {
                return;
            }
            EditorApplication.update -= AddProgress;;
            _addCompleteCallback?.Invoke();;
            _addCompleteCallback = null;;
        }
        
        private static void CheckList(System.Action<bool> action)
        {
            _checkListRequest = Client.List();;
            _checkListCompleteCallback = action;;
            EditorApplication.update += CheckListProgress;;
        }
        
        private static void CheckListProgress()
        {
            if (!_checkListRequest.IsCompleted)
            {
                return;
            }
            EditorApplication.update -= CheckListProgress;;
            if (_checkListRequest.Status != StatusCode.Success)
            {
                return;
            }
            bool exist = false;
            foreach (var package in _checkListRequest.Result){if (package.displayName.Equals("UPM Tool")){exist = true;break;}};
            _checkListCompleteCallback?.Invoke(exist);;
            _checkListCompleteCallback = null;;
        }
        
        public virtual VisualElement CreateExtensionUI()
        {
            button = new Button();
            button.text = "Import UPM Tool";
            button.clickable.clicked+=()=>{var path="https://gitee.com/Chino66/UPM-Tool-Develop.git#upm";button.SetEnabled(false);Add(path,()=>{});};;
            HideButton();;
            CheckList(exist=>{existUPMTool=exist; if (exist){HideButton();}else{ShowButton();}});;
            return button;
        }
        
        public virtual void OnPackageSelectionChange(PackageInfo packageInfo)
        {
            if(!existUPMTool&&packageInfo.displayName==DisplayName){ShowButton();}else{HideButton();};
        }
        
        public virtual void OnPackageAddedOrUpdated(PackageInfo packageInfo)
        {
            CheckList(exist=>{existUPMTool=exist; if (exist){HideButton();}else{ShowButton();}});;
        }
        
        public virtual void OnPackageRemoved(PackageInfo packageInfo)
        {
            CheckList(exist=>{existUPMTool=exist; if (exist){HideButton();}else{ShowButton();}});;
        }
        
        private void ShowButton()
        {
            button.visible=true;button.SetEnabled(true);button.style.height = new StyleLength {value = 20};;
        }
        
        private void HideButton()
        {
            button.visible=false;button.SetEnabled(false);button.style.height = new StyleLength {value = 0};;
        }
    }
}
